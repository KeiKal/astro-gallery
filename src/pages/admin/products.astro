---
import Navbar from '../../components/Navbar.astro';
import type { Product } from '../../utils/types';
import { PrismaClient } from '@prisma/client';
import Toast from '../../components/Toast.astro';

const prisma = new PrismaClient();

// Fetch products from the database
const products: Product[] = await prisma.product.findMany();

// Disconnect from the database
await prisma.$disconnect();
---

<Navbar />
<Toast />

<div class="min-h-screen bg-gray-50 py-8">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center mb-8">
      <div>
        <h1 class="text-3xl font-bold text-gray-900">Manage Products</h1>
        <p class="mt-2 text-sm text-gray-600">Add, edit, or remove products from your store</p>
      </div>
      <button
        id="addProductBtn"
        class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
      >
        <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
        </svg>
        Add New Product
      </button>
    </div>

    <!-- Product Form Modal -->
    <div id="productModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div class="bg-white rounded-xl p-8 max-w-2xl w-full mx-4 shadow-2xl">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-2xl font-bold text-gray-900" id="modalTitle">Add New Product</h2>
          <button id="closeModal" class="text-gray-400 hover:text-gray-500">
            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <form id="productForm" class="space-y-6">
          <input type="hidden" id="productId" />
          <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
            <div>
              <label for="name" class="block text-sm font-medium text-gray-700">Product Name</label>
              <input
                type="text"
                id="name"
                name="name"
                required
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              />
            </div>
            <div>
              <label for="category" class="block text-sm font-medium text-gray-700">Category</label>
              <input
                type="text"
                id="category"
                name="category"
                required
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              />
            </div>
          </div>
          <div>
            <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
            <textarea
              id="description"
              name="description"
              required
              rows="3"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            ></textarea>
          </div>
          <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
            <div>
              <label for="price" class="block text-sm font-medium text-gray-700">Price</label>
              <div class="mt-1 relative rounded-md shadow-sm">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <span class="text-gray-500 sm:text-sm">$</span>
                </div>
                <input
                  type="number"
                  id="price"
                  name="price"
                  step="0.01"
                  required
                  class="pl-7 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                />
              </div>
            </div>
            <div>
              <label for="stock" class="block text-sm font-medium text-gray-700">Stock</label>
              <input
                type="number"
                id="stock"
                name="stock"
                required
                min="0"
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              />
            </div>
          </div>
          <div>
            <label for="image" class="block text-sm font-medium text-gray-700">Product Image</label>
            <div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md">
              <div class="space-y-1 text-center">
                <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                  <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
                <div class="flex text-sm text-gray-600">
                  <label for="image" class="relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-blue-500">
                    <span>Upload a file</span>
                    <input id="image" name="image" type="file" class="sr-only" accept="image/*">
                  </label>
                  <p class="pl-1">or drag and drop</p>
                </div>
                <p class="text-xs text-gray-500">PNG, JPG, GIF up to 10MB</p>
              </div>
            </div>
          </div>
          <div class="flex justify-end space-x-4 mt-6">
            <button
              type="button"
              id="cancelBtn"
              class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Save Product
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div class="bg-white rounded-xl p-8 max-w-md w-full mx-4 shadow-2xl">
        <div class="text-center">
          <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 mb-4">
            <svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
          </div>
          <h3 class="text-lg font-medium text-gray-900 mb-2">Delete Product</h3>
          <p class="text-sm text-gray-500 mb-6">
            Are you sure you want to delete this product? This action cannot be undone.
          </p>
          <div class="flex justify-center space-x-4">
            <button
              id="cancelDeleteBtn"
              class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Cancel
            </button>
            <button
              id="confirmDeleteBtn"
              class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
            >
              Delete
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Products Table -->
    <div class="bg-white rounded-lg shadow overflow-hidden">
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Image</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock</th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {products.map((product) => (
              <tr class="hover:bg-gray-50" data-product-id={product.id}>
                <td class="px-6 py-4 whitespace-nowrap">
                  <img src={product.image} alt={product.name} class="h-16 w-16 object-cover rounded-lg" />
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm font-medium text-gray-900">{product.name}</div>
                  <div class="text-sm text-gray-500 line-clamp-2">{product.description}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                    {product.category}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  ${product.price.toFixed(2)}
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                    product.stock > 0 ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                  }`}>
                    {product.stock > 0 ? `${product.stock} in stock` : 'Out of stock'}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <button
                    class="text-blue-600 hover:text-blue-900 mr-4 edit-product-btn"
                    data-product-id={product.id}
                  >
                    Edit
                  </button>
                  <button
                    class="text-red-600 hover:text-red-900 delete-product-btn"
                    data-product-id={product.id}
                  >
                    Delete
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<script>
  declare global {
    interface Window {
      showToast: (message?: string) => void;
      editProduct: (productId: string) => Promise<void>;
      deleteProduct: (productId: string) => Promise<void>;
    }
  }

  // Modal elements
  const productModal = document.getElementById('productModal');
  const modalTitle = document.getElementById('modalTitle');
  const productForm = document.getElementById('productForm') as HTMLFormElement;
  const closeModal = document.getElementById('closeModal');
  const cancelBtn = document.getElementById('cancelBtn');
  const addProductBtn = document.getElementById('addProductBtn');

  // Delete modal elements
  const deleteModal = document.getElementById('deleteModal');
  const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
  const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
  let productToDelete: string | null = null;

  // Show modal
  function showModal(title: string) {
    if (modalTitle) modalTitle.textContent = title;
    if (productModal) productModal.classList.remove('hidden');
  }

  // Hide modal
  function hideModal() {
    if (productModal) productModal.classList.add('hidden');
    if (productForm) productForm.reset();
  }

  // Show delete modal
  function showDeleteModal(productId: string) {
    productToDelete = productId;
    if (deleteModal) deleteModal.classList.remove('hidden');
  }

  // Hide delete modal
  function hideDeleteModal() {
    if (deleteModal) deleteModal.classList.add('hidden');
    productToDelete = null;
  }

  // Add product
  async function addProduct(formData: FormData) {
    try {
      const response = await fetch('/api/products', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(Object.fromEntries(formData))
      });

      if (response.ok) {
        (window as any).showToast('Product added successfully', 'success');
        hideModal();
        // Refresh the page to show the new product
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      } else {
        const data = await response.json();
        (window as any).showToast(data.error || 'Failed to add product', 'error');
      }
    } catch (error) {
      console.error('Error adding product:', error);
      (window as any).showToast('An error occurred while adding the product', 'error');
    }
  }

  // Edit product
  async function editProduct(productId: string) {
    try {
      const response = await fetch(`/api/products/${productId}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
        }
      });

      if (response.ok) {
        const product = await response.json();
        showModal('Edit Product');
        
        // Fill form with product data
        const form = document.getElementById('productForm') as HTMLFormElement;
        if (form) {
          (form.querySelector('#productId') as HTMLInputElement).value = product.id;
          (form.querySelector('#name') as HTMLInputElement).value = product.name;
          (form.querySelector('#description') as HTMLTextAreaElement).value = product.description;
          (form.querySelector('#price') as HTMLInputElement).value = product.price;
          (form.querySelector('#category') as HTMLInputElement).value = product.category;
          (form.querySelector('#stock') as HTMLInputElement).value = product.stock;
        }
      } else {
        const data = await response.json();
        (window as any).showToast(data.error || 'Failed to fetch product details', 'error');
      }
    } catch (error) {
      console.error('Error fetching product:', error);
      (window as any).showToast('An error occurred while fetching product details', 'error');
    }
  }

  // Update product
  async function updateProduct(formData: FormData) {
    const productId = formData.get('productId') as string;
    try {
      const response = await fetch(`/api/products/${productId}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(Object.fromEntries(formData))
      });

      if (response.ok) {
        (window as any).showToast('Product updated successfully', 'success');
        hideModal();
        // Refresh the page to show updated product
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      } else {
        const data = await response.json();
        (window as any).showToast(data.error || 'Failed to update product', 'error');
      }
    } catch (error) {
      console.error('Error updating product:', error);
      (window as any).showToast('An error occurred while updating the product', 'error');
    }
  }

  // Delete product
  async function deleteProduct(productId: string) {
    try {
      const response = await fetch(`/api/products/${productId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
        }
      });

      if (response.ok) {
        (window as any).showToast('Product deleted successfully', 'success');
        // Remove the product row from the table
        const row = document.querySelector(`tr[data-product-id="${productId}"]`);
        if (row) {
          row.remove();
        }
        hideDeleteModal();
      } else {
        const data = await response.json();
        (window as any).showToast(data.error || 'Failed to delete product', 'error');
      }
    } catch (error) {
      console.error('Error deleting product:', error);
      (window as any).showToast('An error occurred while deleting the product', 'error');
    }
  }

  // Form submission handler
  productForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(productForm);
    const productId = formData.get('productId');

    if (productId) {
      await updateProduct(formData);
    } else {
      await addProduct(formData);
    }
  });

  // Event listeners
  addProductBtn?.addEventListener('click', () => {
    showModal('Add New Product');
    if (productForm) productForm.reset();
  });

  closeModal?.addEventListener('click', hideModal);
  cancelBtn?.addEventListener('click', hideModal);

  // Close modal when clicking outside
  productModal?.addEventListener('click', (e) => {
    if (e.target === productModal) {
      hideModal();
    }
  });

  // Initialize event listeners for edit and delete buttons
  function initializeProductButtons() {
    // Edit buttons
    document.querySelectorAll('.edit-product-btn').forEach(button => {
      button.addEventListener('click', (e) => {
        const productId = (e.currentTarget as HTMLElement).dataset.productId;
        if (productId) {
          editProduct(productId);
        }
      });
    });

    // Delete buttons
    document.querySelectorAll('.delete-product-btn').forEach(button => {
      button.addEventListener('click', (e) => {
        const productId = (e.currentTarget as HTMLElement).dataset.productId;
        if (productId) {
          showDeleteModal(productId);
        }
      });
    });
  }

  // Event listeners for delete modal
  cancelDeleteBtn?.addEventListener('click', hideDeleteModal);
  confirmDeleteBtn?.addEventListener('click', () => {
    if (productToDelete) {
      deleteProduct(productToDelete);
    }
  });

  // Close delete modal when clicking outside
  deleteModal?.addEventListener('click', (e) => {
    if (e.target === deleteModal) {
      hideDeleteModal();
    }
  });

  // Initialize buttons when the DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    initializeProductButtons();
    checkAuth();
  });
</script> 