---
import Navbar from '../components/Navbar.astro';

// Get the site URL from environment variables
const siteUrl = import.meta.env.SITE_URL || 'http://localhost:4321';
---

<Navbar />

<div class="container mx-auto px-4 py-8">
  <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
    <!-- Shipping Information -->
    <div>
      <h2 class="text-2xl font-bold mb-6">Shipping Information</h2>
      <form id="shippingForm" class="space-y-4">
        <div class="grid grid-cols-2 gap-4">
          <div>
            <label for="firstName" class="block text-sm font-medium text-gray-700">First Name</label>
            <input type="text" id="firstName" name="firstName" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
          </div>
          <div>
            <label for="lastName" class="block text-sm font-medium text-gray-700">Last Name</label>
            <input type="text" id="lastName" name="lastName" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
          </div>
        </div>
        <div>
          <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
          <input type="email" id="email" name="email" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
        </div>
        <div>
          <label for="address" class="block text-sm font-medium text-gray-700">Address</label>
          <input type="text" id="address" name="address" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
        </div>
        <div class="grid grid-cols-2 gap-4">
          <div>
            <label for="city" class="block text-sm font-medium text-gray-700">City</label>
            <input type="text" id="city" name="city" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
          </div>
          <div>
            <label for="state" class="block text-sm font-medium text-gray-700">State</label>
            <input type="text" id="state" name="state" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
          </div>
        </div>
        <div class="grid grid-cols-2 gap-4">
          <div>
            <label for="zipCode" class="block text-sm font-medium text-gray-700">ZIP Code</label>
            <input type="text" id="zipCode" name="zipCode" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
          </div>
          <div>
            <label for="country" class="block text-sm font-medium text-gray-700">Country</label>
            <input type="text" id="country" name="country" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
          </div>
        </div>
      </form>
    </div>

    <!-- Order Summary -->
    <div>
      <h2 class="text-2xl font-bold mb-6">Order Summary</h2>
      <div class="bg-white rounded-lg shadow-md p-6">
        <div id="orderItems" class="space-y-4 mb-6">
          <!-- Order items will be dynamically inserted here -->
        </div>
        <div class="border-t pt-4 space-y-2">
          <div class="flex justify-between">
            <span>Subtotal</span>
            <span id="subtotal">$0.00</span>
          </div>
          <div class="flex justify-between">
            <span>Shipping</span>
            <span id="shipping">$0.00</span>
          </div>
          <div class="flex justify-between">
            <span>Tax</span>
            <span id="tax">$0.00</span>
          </div>
          <div class="flex justify-between font-bold text-lg">
            <span>Total</span>
            <span id="total">$0.00</span>
          </div>
        </div>
      </div>

      <!-- Payment Section -->
      <div class="mt-8">
        <h2 class="text-2xl font-bold mb-6">Payment Information</h2>
        <div class="bg-white rounded-lg shadow-md p-6">
          <div id="card-element" class="mb-4">
            <!-- Stripe Card Element will be inserted here -->
          </div>
          <div id="card-errors" class="text-red-500 text-sm mb-4"></div>
          <button
            id="placeOrderButton"
            class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          >
            Place Order
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  console.log('Checkout page script starting...');

  import { loadStripe } from '@stripe/stripe-js';
  import type { Stripe, StripeElements, StripeElementChangeEvent } from '@stripe/stripe-js';

  interface CartItem {
    id: string;
    quantity: number;
    price: number;
    name: string;
  }

  // Load cart from localStorage
  let cart: CartItem[] = [];
  let total = 0;

  function loadCart() {
    const savedCart = localStorage.getItem('cart');
    if (savedCart) {
      cart = JSON.parse(savedCart);
      updateOrderSummary();
    }
  }

  function updateOrderSummary() {
    const orderItems = document.getElementById('orderItems');
    const orderTotal = document.getElementById('total');
    const subtotal = document.getElementById('subtotal');
    const shipping = document.getElementById('shipping');
    const tax = document.getElementById('tax');
    
    if (!orderItems || !orderTotal || !subtotal || !shipping || !tax) return;

    if (cart.length === 0) {
      orderItems.innerHTML = '<p class="text-gray-500 text-center">Your cart is empty</p>';
      orderTotal.textContent = '$0.00';
      subtotal.textContent = '$0.00';
      shipping.textContent = '$0.00';
      tax.textContent = '$0.00';
      return;
    }

    // Calculate totals
    const subtotalAmount = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    const shippingAmount = 5.99; // Fixed shipping cost
    const taxAmount = subtotalAmount * 0.1; // 10% tax
    total = subtotalAmount + shippingAmount + taxAmount;

    // Update order items
    orderItems.innerHTML = cart.map(item => `
      <div class="flex justify-between py-2">
        <div>
          <p class="font-medium">${item.name}</p>
          <p class="text-sm text-gray-500">Quantity: ${item.quantity}</p>
        </div>
        <p>$${(item.price * item.quantity).toFixed(2)}</p>
      </div>
    `).join('');

    // Update totals
    subtotal.textContent = `$${subtotalAmount.toFixed(2)}`;
    shipping.textContent = `$${shippingAmount.toFixed(2)}`;
    tax.textContent = `$${taxAmount.toFixed(2)}`;
    orderTotal.textContent = `$${total.toFixed(2)}`;
  }

  // Listen for cart updates from localStorage
  window.addEventListener('storage', (event) => {
    if (event.key === 'cart') {
      const newCart = event.newValue ? JSON.parse(event.newValue) : [];
      cart = newCart;
      updateOrderSummary();
    }
  });

  // Listen for cart updates from custom event
  window.addEventListener('cartUpdated', ((event: CustomEvent) => {
    cart = event.detail.cart;
    updateOrderSummary();
  }) as EventListener);

  // Initialize
  loadCart();

  // Handle form submission
  const form = document.getElementById('checkoutForm');
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target as HTMLFormElement);
    const data = {
      shippingInfo: {
        name: formData.get('name'),
        email: formData.get('email'),
        address: formData.get('address'),
        city: formData.get('city'),
        state: formData.get('state'),
        zipCode: formData.get('zipCode'),
        country: formData.get('country'),
      },
      paymentInfo: {
        cardNumber: formData.get('cardNumber'),
        expiryDate: formData.get('expiryDate'),
        cvv: formData.get('cvv'),
      },
      items: cart,
      total,
      userEmail: formData.get('email'),
      userName: formData.get('name'),
    };

    try {
      const response = await fetch('/api/checkout', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (result.success) {
        // Clear cart
        localStorage.removeItem('cart');
        // Redirect to success page
        window.location.href = `/order-confirmation?orderId=${result.orderId}`;
      } else {
        window.showToast('Checkout failed: ' + result.error);
      }
    } catch (error) {
      window.showToast('An error occurred during checkout');
    }
  });

  // Initialize Stripe if key is available
  const stripeKey = import.meta.env.PUBLIC_STRIPE_PUBLISHABLE_KEY;
  if (stripeKey) {
    loadStripe(stripeKey).then(stripe => {
      if (!stripe) {
        console.error('Stripe failed to load.');
        return;
      }

      console.log('Stripe loaded successfully');
      const elements = stripe.elements();
      const card = elements.create('card');
      card.mount('#card-element');

      // Handle card element changes
      card.on('change', (event: StripeElementChangeEvent) => {
        if (cardErrors) {
          cardErrors.textContent = event.error ? event.error.message : '';
        }
      });

      // Place order button event listener
      placeOrderButton?.addEventListener('click', async () => {
        console.log('Place order button clicked');
        try {
          const { error, paymentMethod } = await stripe.createPaymentMethod({
            type: 'card',
            card,
          });

          if (error) {
            console.error('Payment method error:', error);
            if (cardErrors) cardErrors.textContent = error.message || 'An error occurred';
            return;
          }

          console.log('Payment method created:', paymentMethod);

          // Get shipping form data
          const shippingForm = document.getElementById('shippingForm') as HTMLFormElement;
          const formData = new FormData(shippingForm);
          const shippingInfo = {
            address: formData.get('address'),
            city: formData.get('city'),
            state: formData.get('state'),
            zipCode: formData.get('zipCode'),
            country: formData.get('country'),
          };

          // Send the payment method ID to your server to complete the payment
          const response = await fetch('/api/checkout', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              paymentMethodId: paymentMethod.id,
              items: cart,
              total: parseFloat(totalElement?.textContent?.replace('$', '') || '0'),
              shippingInfo,
              userEmail: formData.get('email'),
              userName: `${formData.get('firstName')} ${formData.get('lastName')}`,
            }),
          });

          const result = await response.json();

          if (!response.ok) {
            throw new Error(result.error || 'An error occurred during checkout');
          }

          // Clear cart and redirect to success page
          localStorage.removeItem('cart');
          window.location.href = `/order-confirmation?orderId=${result.orderId}`;
        } catch (error) {
          console.error('Error placing order:', error);
          alert('Failed to place order. Please try again.');
        }
      });
    }).catch(error => {
      console.error('Error initializing Stripe:', error);
    });
  } else {
    console.warn('Stripe publishable key not found. Payment functionality will be disabled.');
    if (placeOrderButton) {
      placeOrderButton.disabled = true;
      placeOrderButton.textContent = 'Payment Unavailable';
    }
  }
</script> 