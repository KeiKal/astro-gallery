---
import type { Product } from '../utils/types';
import Toast from './Toast.astro';

interface Props {
  product: {
    id: string;
    name: string;
    description: string;
    price: number;
    image: string;
    category: string;
    stock: number;
  };
}

const { product } = Astro.props;
---

<div 
  class="product-card group bg-white rounded-xl shadow-sm hover:shadow-lg transition-all duration-300 overflow-hidden transform hover:-translate-y-1" 
  data-name={product.name} 
  data-description={product.description}
>
  <div class="relative">
    <img
      src={product.image}
      alt={product.name}
      class="w-full h-56 object-cover group-hover:opacity-90 transition-opacity duration-300"
    />
    <div class="absolute top-2 right-2">
      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
        {product.category}
      </span>
    </div>
  </div>
  
  <div class="p-6">
    <h3 class="text-lg font-semibold text-gray-900 mb-2 group-hover:text-blue-600 transition-colors duration-300">
      {product.name}
    </h3>
    <p class="text-gray-600 text-sm mb-4 line-clamp-2">{product.description}</p>
    
    <div class="flex justify-between items-center">
      <div>
        <span class="text-2xl font-bold text-gray-900">${product.price.toFixed(2)}</span>
        <span class="text-sm text-gray-500 ml-2">/ unit</span>
      </div>
      <button
        class="add-to-cart bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
        data-product-id={product.id}
      >
        Add to Cart
      </button>
    </div>
    
    <div class="mt-4 text-sm text-gray-500">
      {product.stock > 0 ? (
        <span class="text-green-600">In Stock ({product.stock} available)</span>
      ) : (
        <span class="text-red-600">Out of Stock</span>
      )}
    </div>
  </div>
</div>

<Toast />

<script>
  declare global {
    interface Window {
      showToast: (message?: string) => void;
    }
  }

  document.querySelectorAll('.add-to-cart').forEach((button) => {
    button.addEventListener('click', () => {
      const productId = button.getAttribute('data-product-id');
      const productCard = button.closest('.product-card');
      const productName = productCard?.getAttribute('data-name');
      const productPrice = parseFloat(productCard?.querySelector('.text-2xl')?.textContent?.replace('$', '') || '0');
      
      if (productId) {
        // Get current cart from localStorage
        const cart = JSON.parse(localStorage.getItem('cart') || '[]');
        
        // Check if product already exists in cart
        const existingItem = cart.find((item: any) => item.id === productId);
        
        if (existingItem) {
          existingItem.quantity += 1;
        } else {
          // Add product to cart with price
          cart.push({
            id: productId,
            quantity: 1,
            price: productPrice,
            name: productName
          });
        }
        
        // Save updated cart
        localStorage.setItem('cart', JSON.stringify(cart));
        
        // Dispatch custom event for cart update
        const cartEvent = new CustomEvent('addToCart', {
          detail: {
            productId,
            quantity: 1,
            price: productPrice,
            name: productName
          }
        });
        document.dispatchEvent(cartEvent);
        
        // Show toast notification
        window.showToast(`${productName} added to cart!`);
      }
    });
  });
</script> 